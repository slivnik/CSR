%tokens alignas_like attr attr_head base begin_arg binop case_like cast catch_like colcol colon comma const_like decl decl_head default_like define_like delete_like do_like else_head else_like end_arg exp fn_decl for_like ftemplate function if_clause if_head if_like insert int_like int_line langle lbrace lbrack lpar lproc new_exp new_like operator_like prelangle prerangle public_like question raw_int raw_ubin rbrace rbrack rpar rproc section_scrap semi sizeof_like stmt struct_head struct_like tag template_like typedef_like ubinop unop using_like ;
%goal source ;

insert insert --> insert ;

exp ( lbrace | int_like | decl ) --> fn_decl 2 ;
exp unop --> exp ;
exp ( binop | ubinop ) exp --> exp ;
exp comma exp --> exp ;
exp ( lpar rpar | cast ) colon --> exp 2 base ;
exp semi --> stmt ;
exp colon --> tag ;
exp rbrace --> stmt rbrace ;
exp ( lpar rpar | cast ) ( const_like | case_like ) --> exp 2 ;
exp ( exp | cast ) --> exp ;
lpar ( exp | ubinop ) rpar --> exp ;
lpar rpar --> exp ;
lpar ( decl_head | int_like | cast ) rpar --> cast ;
lpar ( decl_head | int_like | exp ) comma --> lpar ;
lpar ( stmt | decl ) --> lpar ;
unop ( exp | int_like ) --> exp ;
ubinop cast rpar --> cast rpar ;
ubinop ( exp | int_like ) --> 2 ;
ubinop binop --> binop ;
binop binop --> binop ;
cast ( lpar | exp ) --> 2 ;
cast semi --> exp semi ;
sizeof_like cast --> exp ;
sizeof_like exp --> exp ;
int_like ( int_like | struct_like ) --> 2 ;
int_like exp ( raw_int | struct_like ) --> int_like 3 ;
int_like ( exp | ubinop | colon ) --> decl_head 2 ;
int_like ( semi | binop ) --> decl_head 2 ;
public_like colon --> tag ;
public_like --> int_like ;
colcol ( exp | int_like ) --> 2 ;
colcol colcol --> colcol ;
decl_head comma --> decl_head ;
decl_head ubinop --> decl_head ;
decl_head exp ( alignas_like | attr | attr_head | base | begin_arg | binop | case_like | catch_like | colcol | colon | comma | const_like | decl | decl_head | default_like | define_like | delete_like | do_like | else_head | else_like | end_arg | fn_decl | for_like | ftemplate | function | if_clause | if_head | if_like | int_like | int_line | langle | lbrace | lproc | new_exp | new_like | operator_like | prelangle | prerangle | public_like | question | raw_int | raw_ubin | rbrace | rbrack | rpar | rproc | section_scrap | semi | sizeof_like | stmt | struct_head | struct_like | tag | template_like | typedef_like | ubinop | unop | using_like ) --> decl_head 3 ;
decl_head ( binop | colon ) exp ( comma | semi | rpar ) --> decl_head 4 ;
decl_head cast --> decl_head ;
decl_head ( int_like | lbrace | decl ) --> fn_decl 2 ;
decl_head semi --> decl ;
decl decl --> decl ;
decl ( stmt | function ) --> 2 ;
base ( int_like | exp ) comma --> base ;
base ( int_like | exp ) lbrace --> lbrace ;
struct_like lbrace --> struct_head ;
struct_like ( exp | int_like ) semi --> decl_head semi ;
struct_like ( exp | int_like ) lbrace --> struct_head ;
struct_like ( exp | int_like ) colon --> struct_like 2 base ;
struct_like ( exp | int_like ) ( alignas_like | attr | attr_head | begin_arg | binop | case_like | cast | catch_like | colcol | comma | const_like | decl | decl_head | default_like | define_like | delete_like | do_like | else_head | else_like | end_arg | exp | fn_decl | for_like | ftemplate | function | if_clause | if_head | if_like | int_like | int_line | langle | lbrack | lpar | lproc | new_exp | new_like | operator_like | prelangle | prerangle | public_like | question | raw_int | raw_ubin | rbrace | rbrack | rpar | rproc | section_scrap | sizeof_like | stmt | struct_head | struct_like | tag | template_like | typedef_like | ubinop | unop | using_like ) --> int_like 3 ;
struct_head ( decl | stmt | function ) rbrace --> int_like ;
struct_head rbrace --> int_like ;
fn_decl decl --> fn_decl ;
fn_decl stmt --> function ;
function ( stmt | decl | function ) --> 2 ;
lbrace rbrace --> stmt ;
lbrace ( stmt | decl | function ) rbrace --> stmt ;
lbrace ( exp | exp comma ) rbrace --> exp ;
if_like exp --> if_clause ;
else_like colon --> else_like base ;
else_like lbrace --> else_head lbrace ;
else_like stmt --> stmt ;
else_head ( stmt | exp ) --> stmt ;
if_clause lbrace --> if_head lbrace ;
if_clause stmt else_like if_like --> if_like ;
if_clause stmt else_like --> else_like ;
if_clause stmt --> else_like stmt ;
if_head ( stmt | exp ) else_like if_like --> if_like ;
if_head ( stmt | exp ) else_like --> else_like ;
if_head ( stmt | exp ) --> else_head 2 ;
do_like stmt else_like semi --> stmt ;
case_like semi --> stmt ;
case_like colon --> tag ;
case_like exp --> exp ;
catch_like ( cast | exp ) --> fn_decl ;
tag tag --> tag ;
tag ( stmt | decl | function ) --> 2 ;
stmt ( stmt | decl | function ) --> 2 ;
semi --> stmt ;
lproc ( if_like | else_like | define_like ) --> lproc ;
lproc rproc --> insert ;
lproc ( exp | exp exp | function ) rproc --> insert ;
section_scrap semi --> stmt ;
section_scrap --> exp ;
insert function --> function ;
prelangle --> binop ;
prerangle --> binop ;
langle prerangle --> cast ;
langle ( decl_head | int_like | exp ) prerangle --> cast ;
langle ( decl_head | int_like | exp ) comma --> langle ;
template_like exp prelangle --> template_like exp langle ;
template_like ( exp | raw_int ) --> 2 ;
template_like --> raw_int ;
new_like lpar exp rpar --> new_like ;
new_like cast --> exp ;
new_like ( alignas_like | attr | attr_head | base | begin_arg | binop | case_like | catch_like | colcol | colon | comma | const_like | decl | decl_head | default_like | define_like | delete_like | do_like | else_head | else_like | end_arg | exp | fn_decl | for_like | ftemplate | function | if_clause | if_head | if_like | int_like | int_line | langle | lbrace | lbrack | lproc | new_exp | new_like | operator_like | prelangle | prerangle | public_like | question | raw_int | raw_ubin | rbrace | rbrack | rpar | rproc | section_scrap | semi | sizeof_like | stmt | struct_head | struct_like | tag | template_like | typedef_like | ubinop | unop | using_like ) --> new_exp 2 ;
new_exp ( int_like | const_like ) --> new_exp ;
new_exp struct_like ( exp | int_like ) --> new_exp ;
new_exp raw_ubin --> new_exp ;
new_exp ( lpar | exp ) --> exp 2 ;
new_exp ( alignas_like | attr | attr_head | base | begin_arg | binop | case_like | cast | catch_like | colon | comma | decl | decl_head | default_like | define_like | delete_like | do_like | else_head | else_like | end_arg | fn_decl | for_like | ftemplate | function | if_clause | if_head | if_like | int_line | langle | lbrace | lbrack | lproc | new_exp | new_like | operator_like | prelangle | prerangle | public_like | question | rbrace | rbrack | rpar | rproc | section_scrap | semi | sizeof_like | stmt | struct_head | tag | template_like | typedef_like | ubinop | unop | using_like ) --> exp 2 ;
ftemplate prelangle --> ftemplate langle ;
ftemplate --> exp ;
for_like exp --> else_like ;
raw_ubin const_like --> raw_ubin ;
raw_ubin --> ubinop ;
const_like --> int_like ;
raw_int prelangle --> raw_int langle ;
raw_int colcol --> colcol ;
raw_int cast --> raw_int ;
raw_int lpar --> exp lpar ;
raw_int ( alignas_like | attr | attr_head | base | begin_arg | binop | case_like | catch_like | colon | comma | const_like | decl | decl_head | default_like | define_like | delete_like | do_like | else_head | else_like | end_arg | exp | fn_decl | for_like | ftemplate | function | if_clause | if_head | if_like | int_like | int_line | lbrace | lproc | new_exp | new_like | operator_like | prerangle | public_like | question | raw_int | raw_ubin | rbrace | rbrack | rpar | rproc | section_scrap | semi | sizeof_like | stmt | struct_head | struct_like | tag | template_like | typedef_like | ubinop | unop | using_like ) --> int_like 2 ;
operator_like ( binop | unop | ubinop ) ( alignas_like | attr | attr_head | base | begin_arg | case_like | cast | catch_like | colcol | colon | comma | const_like | decl | decl_head | default_like | define_like | delete_like | do_like | else_head | else_like | end_arg | exp | fn_decl | for_like | ftemplate | function | if_clause | if_head | if_like | int_like | int_line | langle | lbrace | lbrack | lpar | lproc | new_exp | new_like | operator_like | prelangle | prerangle | public_like | question | raw_int | raw_ubin | rbrace | rbrack | rpar | rproc | section_scrap | semi | sizeof_like | stmt | struct_head | struct_like | tag | template_like | typedef_like | ubinop | unop | using_like ) --> exp 3 ;
operator_like ( new_like | delete_like ) --> exp ;
operator_like comma --> exp ;
operator_like ( alignas_like | attr | attr_head | base | begin_arg | binop | case_like | cast | catch_like | colcol | colon | const_like | decl | decl_head | default_like | define_like | do_like | else_head | else_like | end_arg | exp | fn_decl | for_like | ftemplate | function | if_clause | if_head | if_like | int_like | int_line | langle | lbrace | lbrack | lpar | lproc | new_exp | operator_like | prelangle | prerangle | public_like | question | raw_int | rbrace | rbrack | rpar | rproc | section_scrap | semi | sizeof_like | stmt | struct_head | struct_like | tag | template_like | typedef_like | ubinop | unop | using_like ) --> new_exp 2 ;
typedef_like ( int_like | cast ) ( comma | semi ) --> typedef_like exp 3 ;
typedef_like int_like --> typedef_like ;
typedef_like exp ( alignas_like | attr | attr_head | base | begin_arg | binop | case_like | catch_like | colcol | colon | comma | const_like | decl | decl_head | default_like | define_like | delete_like | do_like | else_head | else_like | end_arg | fn_decl | for_like | ftemplate | function | if_clause | if_head | if_like | int_like | int_line | langle | lbrace | lproc | new_exp | new_like | operator_like | prelangle | prerangle | public_like | question | raw_int | raw_ubin | rbrace | rbrack | rpar | rproc | section_scrap | semi | sizeof_like | stmt | struct_head | struct_like | tag | template_like | typedef_like | ubinop | unop | using_like ) --> typedef_like 3 ;
typedef_like comma --> typedef_like ;
typedef_like semi --> decl ;
typedef_like ubinop ( cast | ubinop ) --> typedef_like 3 ;
delete_like lbrack rbrack --> delete_like ;
delete_like exp --> exp ;
question exp ( colon | base ) --> binop ;
begin_arg end_arg --> exp ;
( alignas_like | attr | attr_head | base | binop | case_like | cast | catch_like | colcol | colon | comma | decl | decl_head | default_like | define_like | delete_like | do_like | else_head | else_like | end_arg | exp | fn_decl | for_like | function | if_clause | if_head | if_like | insert | int_like | int_line | langle | lbrace | lbrack | lpar | lproc | question | rbrace | rbrack | rpar | rproc | section_scrap | sizeof_like | stmt | struct_head | struct_like | tag | typedef_like | ubinop | unop | using_like ) end_arg --> end_arg ;
alignas_like decl_head --> attr ;
alignas_like exp --> attr ;
lbrack lbrack --> attr_head ;
lbrack --> lpar ;
rbrack --> rpar ;
attr_head rbrack rbrack --> attr ;
attr_head exp --> attr_head ;
attr_head using_like exp colon --> attr_head ;
attr ( lbrace | stmt ) --> 2 ;
attr tag --> tag ;
attr semi --> stmt ;
attr attr --> attr ;
attr decl_head --> decl_head ;
decl_head attr --> struct_like ;
using_like --> int_like ;
struct_like attr --> struct_like ;
exp attr --> exp ;
attr typedef_like --> typedef_like ;
raw_int lbrack --> exp ;
attr_head comma --> attr_head ;
if_head attr --> if_head ;
lbrack lbrack rbrack rbrack --> exp ;
attr function --> function ;
default_like colon --> case_like colon ;
default_like --> exp ;
struct_like struct_like --> struct_like ;
exp colon int_line --> int_like ;
langle struct_like ( exp | int_like ) comma --> langle ;
langle struct_like ( exp | int_like ) prerangle --> cast ;
template_like cast struct_like --> struct_like ;
tag rbrace --> decl rbrace ;
fn_decl attr --> fn_decl ;
alignas_like cast --> attr ;
